## Robot Browser Environment

### User Agent Details
```
Mozilla/5.0 (Linux; Android 7.1.2; UP-CHT01 Build/NJH47B; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.100 Safari/537.36
```

### Key Information
- **Operating System**: Android 7.1.2 (Nougat)
- **Device Model**: UP-CHT01
- **Build**: NJH47B
- **Browser**: Chrome 52.0.2743.100 (WebView)
- **WebKit Version**: 537.36
- **Mode**: WebView (wv flag)

### JavaScript Compatibility (Chrome 52 / Android WebView)

#### Supported Features:
- Basic ES5 features (fully supported)
- Some ES6 features:
  - Array.from()
  - Array.prototype.find
  - Array.prototype.findIndex
  - Basic Promises
  - Object.assign()
  - String.prototype.includes
  - String.prototype.startsWith/endsWith

#### Not Supported / Unreliable:
- ES6 Classes
- Arrow Functions
- Template Literals
- Destructuring
- Spread/Rest operators
- async/await
- Map/Set
- let/const declarations
- Default parameters
- Modules (import/export)
- Promise.finally()

#### Partial/Buggy Support:
- Fetch API
- localStorage in WebView
- CSS Grid
- Flexbox (old syntax might be needed)
- WebSockets
- IndexedDB

### Technical Implications
1. **Browser Age**:
   - Chrome 52 is from 2016
   - Many modern JavaScript features may not be supported
   - ES6 features might be partially or not supported

2. **WebView Limitations**:
   - Running in WebView mode means limited browser functionality
   - Some browser APIs might be restricted
   - Performance might be different from full Chrome

3. **Android Version**:
   - Android 7.1.2 is from 2017
   - May have older WebView implementation
   - Could have memory constraints

### Development Considerations
1. Need to use older JavaScript syntax:
   - Avoid modern ES6+ features
   - Use var instead of const/let
   - Avoid template literals
   - Be cautious with spread operators
   - Polyfill modern functions

2. Browser Compatibility:
   - Test for feature availability
   - Provide fallbacks for modern features
   - Keep JavaScript lightweight
   - Minimize complex DOM operations

3. Performance:
   - Batch DOM updates
   - Minimize animations
   - Be cautious with memory usage
   - Consider reduced CPU/GPU capabilities

### Required Polyfills
For modern JavaScript features, we'll need polyfills for:
1. Promise
2. Array methods (from, find, findIndex)
3. Object.assign
4. String methods (includes, startsWith, endsWith)
5. Function.prototype.bind
6. Array.prototype.forEach (for very old WebView versions)

### Recommended Approach
1. Use a minimal polyfill bundle
2. Write ES5 compatible code
3. Test feature support before using:
   ```javascript
   if (typeof Promise !== 'undefined') {
     // Use promises
   } else {
     // Use callbacks
   }
   ``` 